import streamlit as st
import pandas as pd
import seaborn as sns
import plotly.express as px

# Streamlit page configuration
st.set_page_config(
    page_title="Dataset Analysis App",
    page_icon="📊",
    layout="wide",
    initial_sidebar_state="expanded"
)

@st.cache_data
def load_data():
    # Example preprocessing logic (replace with logic from your notebooks)
    data = pd.read_csv(r"W:\5th semester\ids proj\Data.csv")
    # Add preprocessing steps here if necessary
    return data

data = load_data()

# Sidebar for navigation
st.sidebar.header("Explore Analysis")
options = [
    "Overview",
    "Detailed Visualizations",
    "Custom Filters",
    "Insights and Trends"
]
selected_option = st.sidebar.radio("Choose a section:", options)

# Overview section
if selected_option == "Overview":
    st.title("📊 Dataset Overview")
    st.write("Quick summary of the dataset.")

    st.write("### Dataset Preview")
    st.write(data.head(10))

    st.write("### Basic Statistics")
    st.write(data.describe())

# Detailed Visualizations section
elif selected_option == "Detailed Visualizations":
    st.title("📈 Detailed Visualizations")

    # Example: Distribution plot using seaborn
    column = st.selectbox("Select a column for distribution plot:", data.columns)
    st.write(f"### Distribution of {column}")
    fig = sns.histplot(data[column], kde=True)
    st.pyplot(fig.figure)

    # Example: Scatter plot using plotly
    x_col = st.selectbox("Select X-axis:", data.columns)
    y_col = st.selectbox("Select Y-axis:", data.columns)
    fig = px.scatter(data, x=x_col, y=y_col, title=f"Scatter Plot of {x_col} vs {y_col}")
    st.plotly_chart(fig)

# Custom Filters section
elif selected_option == "Custom Filters":
    st.title("🔍 Custom Filters")

    # Add sliders and filters based on dataset columns
    for column in data.select_dtypes(include=['int', 'float']).columns:
        min_val, max_val = st.slider(f"Filter by {column}:", 
                                     min_value=float(data[column].min()), 
                                     max_value=float(data[column].max()), 
                                     value=(float(data[column].min()), float(data[column].max())))
        data = data[(data[column] >= min_val) & (data[column] <= max_val)]

    st.write("### Filtered Data")
    st.write(data)

# Insights and Trends section
elif selected_option == "Insights and Trends":
    st.title("📊 Insights and Trends")

    # Example: Grouping and aggregating data
    group_column = st.selectbox("Select a column to group by:", data.columns)
    agg_column = st.selectbox("Select a column to aggregate:", data.columns)
    grouped_data = data.groupby(group_column)[agg_column].mean().reset_index()

    st.write(f"### Average {agg_column} by {group_column}")
    fig = px.bar(grouped_data, x=group_column, y=agg_column, title=f"Average {agg_column} by {group_column}")
    st.plotly_chart(fig)

# Footer
st.markdown(
    """
    <hr style='border: 1px solid #e0e0e0;'>
    <footer class='footer'>
        <p>📊 Dataset Analysis App - Generated by Streamlit</p>
    </footer>
    """,
    unsafe_allow_html=True
)
